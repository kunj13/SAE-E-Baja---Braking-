# -*- coding: utf-8 -*-
"""braking.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XhQ_OyOz_ZjEUoA905GW-iCR1FxFK6GS
"""

mass=265 #mass of vehicle.
center_gravity=0.450 #from ground
weight_distibution=40/60
max_speed=40
max_speed_in_m=40*5 /18
wheelbase= 1.655  #distance between steering axle and rear axle.it depends on rollcage design.
tyre_dia_front=0.5334
tyre_dia_rear=0.5842
pedal_ratio=6/1
pedal_leverage=0.9 #stroke of master cylinder * pedal ratio 0.127
dia_master_cylinder=0.0127 #depends upon master cylinder.
stroke_mc=0.0254   #depends upon master cylinder.
#static weight at the starting
weight_front=mass*40*9.8/100 
weight_rear=mass*60*9.8/100
print(weight_rear)
print(weight_front)
print(max_speed_in_m)

mu_road_tyre=0.7  #mu value depends upon the material of the tyre
g=9.81

#deceleration using the normal method.
frictional_force= mu_road_tyre * g*mass
deceleration_calculated = mu_road_tyre * g

print(frictional_force)
print(deceleration_calculated)

#deceleration using the max speed.
x = max_speed_in_m*g
y = ((max_speed_in_m/mu_road_tyre) + 0.3*g)
deceleration_average = x/y;
print(deceleration_average)

#stopping distance
stopping_distance = (max_speed_in_m**(2))/(2*deceleration_average)
print(stopping_distance)

#finding the lengths l1 and l2 according to wheelbase
weight_total=mass*9.8
weight_transfer= (mu_road_tyre * center_gravity * weight_total)/wheelbase
print(weight_transfer)

#weight after weight distribution
weight_front_dynamic=weight_front+weight_transfer
weight_rear_dynamic = weight_rear - weight_transfer
print(weight_front_dynamic)
print(weight_rear_dynamic)

l1=wheelbase*60 /100
l2=wheelbase*40/100
print(l1)
print(l2)

#weight transfer from the concept.
weight_front_concept = mass*9.8*(l2 + (deceleration_calculated/g)* center_gravity) / wheelbase
weight_rear_concept= mass*9.8*(l1 - (deceleration_calculated/g)* center_gravity) / wheelbase
print(weight_front_concept)
print(weight_rear_concept)

#torque required to stop the vehicle
torque_front= mu_road_tyre * weight_front_dynamic*tyre_dia_front /2
torque_rear = mu_road_tyre *weight_rear_dynamic*tyre_dia_rear/2
print(torque_front)
print(torque_rear)

#force on the front and rear axles
force_front=mu_road_tyre*weight_front_dynamic
force_rear=mu_road_tyre*weight_rear_dynamic
print(force_front)
print(force_rear)

#CALIPER 
import math
# front - https://www.wilwood.com/Calipers/CaliperList?subname=PS1 
#rear - https://www.wilwood.com/calipers/CaliperList?subname=Dynapro%20Single
caliper_dia_front=0.031275
caliper_dia_rear= 0.0285
pedal_force=140*pedal_ratio*pedal_leverage #88.9
area_master_cylinder= (math.pi * (dia_master_cylinder **2)) /4
pressure_mc= pedal_force/area_master_cylinder
print(pressure_mc)

area_caliper_front=math.pi * (caliper_dia_front**2) *0.25
area_caliper_rear=math.pi *(caliper_dia_rear**2)*0.25
print(area_caliper_front)
print(area_caliper_rear)
mu_pad=0.4
caliper_force_front=2*pressure_mc*area_caliper_front*mu_pad
caliper_force_rear=2*pressure_mc*area_caliper_rear*mu_pad

effective_radius_front= torque_front/(2*caliper_force_front)
effective_radius_rear= torque_rear/(2*caliper_force_rear)

print(effective_radius_front)
print(effective_radius_rear)

#radius_front_disc= 64.6+10 = 149.2 = 150
#radius_rear_disc=72.08+15 = 174.16 = 175